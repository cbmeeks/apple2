         ORG   $800       ; VIDEO DECODER PROGRAM START

                          ;
                          ;
                          ; VARIOUS EQUATES RELATING
                          ; TO STORAGE AND RETRIEVAL
                          ;
                          ;

HIRES1   EQU   $2000      ; HIRES PAGES 1 AND 2
HIRES2   EQU   $4000

DATA     EQU   $6000      ; LOCATION TO HOLD COMPRESSED DATA

LN       EQU   $8400      ; LOCATION WHERE FRAME LENGTHS
                          ; ARE STORED

RDLO     EQU   $06        ; LOCATION IN MEMORY WE
RDHI     EQU   $07        ; ARE READING FROM

WRTLO    EQU   $08        ; PAGE LOCATION WE ARE
WRTHI    EQU   $09        ; WRITING TO

LNLO     EQU   $EC        ; FOR READING UPDATE LENGTHS
LNHI     EQU   $ED

RDCMPLO  EQU   $EE        ; EXTRA READ 'HEADS' FOR LZ77 DECOMP
RDCMPHI  EQU   $EF

                          ; NOTE: ZP ADDRESS $EB IS FREE

                          ;
                          ;
                          ; EQUATES RELATING TO
                          ; SYSTEM CALLS
                          ;
                          ;

MLI      EQU   $BF00      ; PRODOS CALL
CREATE   EQU   $C0        ; MLI CREATE FILE
OPEN     EQU   $C8        ; MLI OPEN FILE
READ     EQU   $CA        ; MLI READ FILE
WRITE    EQU   $CB        ; MLI WRITE FILE
SETPOS   EQU   $CE        ; MLI SET POSITION IN FILE
CLOSE    EQU   $CC        ; MLI CLOSE FILE
DESTROY  EQU   $C1        ; MLI DELETE FILE
SETPFIX  EQU   $C6        ; MLI GET SYSTEM PREFIX
GETPFIX  EQU   $C7        ; MLI SET SYSTEM PREFIX

PRNTA    EQU   $FDDA      ; PRINT ACCUMULATOR
CROUT    EQU   $FD8E      ; OUTPUT CARRIAGE RETURN

                          ;
                          ;
                          ; MAIN PROGRAM AREA
                          ;
                          ;

INIT     JSR   SETPRE     ; SET PREFIX, ASK FOR VID FILE, OPEN
         JSR   ASKFILE
         JSR   OPNFILE

         LDY   #0

         LDA   #1
         STA   STATE      ; SET STATE = 1

         JSR   LDLNS      ; LOAD LIST OF FRAME LENGTHS INTO MEMORY

         LDA   #<LN       ; INIT READ BYTES FOR UPDATE LENGTH
         STA   LNLO
         LDA   #>LN
         STA   LNHI

         JSR   CRETEMP    ; CREATE TEMP VIDEO CACHE FILE
         JSR   OPNTEMP
         JSR   MKTEMP
         JSR   CLSTEMP

         JSR   CLSFILE

         JSR   OPNTEMP    ; OPEN CACHE FILE

         JSR   CLRHR1     ; CLEAR HIRES1

         STA   $C057      ; INIT DISPLAY(?) -- INSPECT FURTHER
         STA   $C050

         STA   $C054

LOOP     JSR   UPDATE     ; MAIN LOOP
         LDA   $C000      ; READ FOR KEYPRESS
         BMI   EXIT
         STA   $C010      ; CLEAR KEYBOARD STROBE
         JMP   LOOP

EXIT     JSR   CLSTEMP
         JSR   DESTEMP
         JMP   $FA62      ; SWITCH TEXT

                          ;
                          ;
                          ; HIGH-LEVEL SUBROUTINES
                          ;
                          ;

ASKFILE  LDX   #0         ; ASK WITCH VIDEO FILE TO PLAY
:LOOP1   INX              ; LOOP TO PRINT 'FILENAME:'
         LDA   PROMPT,X
         JSR   $FDF0
         CPX   PROMPT
         BLT   :LOOP1
         LDA   #$A0       ; SET ' :' AS PROMPT
         STA   $33
         JSR   $FD6A      ; APPLE II GETLN ROUTINE
         STX   FILENAME
         LDX   #0
:LOOP2   LDA   $200,X
         STA   FILENAME+1,X
         INX
         CPX   FILENAME
         BNE   :LOOP2
         RTS

UPDATE   LDA   STATE      ; HANDLES UPDATING, SWITCHING FRAMES
         BNE   :NOTZERO
         LDA   CMPTYPE
         BEQ   :NORMAL
         JSR   MONMOV
         JMP   :SKIP
:NORMAL  JSR   WRTHR1
         JSR   RDDAT
         JSR   PROCDAT
:SKIP    LDA   #1
         STA   STATE
         STA   $C054
         JMP   :ENDSUB
:NOTZERO LDA   #<DATA     ; STATE = 1
         STA   TLOC
         LDA   #>DATA
         STA   TLOC+1
         JSR   NXTLN
         JSR   RDTEMP
         JSR   WRTHR2
         JSR   RDDAT
         JSR   PROCDAT
         LDA   #0
         STA   STATE
         STA   $C055
:ENDSUB  RTS

MKTEMP   LDA   #$00       ; LOAD FRAME UPDATES INTO RAMDISK CACHE FILE
         STA   FLOC       ; SET UP BUFFER THROUGH WHICH TO COPY TEMP CACHE
         LDA   #$60
         STA   FLOC+1
         LDA   #$00
         STA   FLEN
         LDA   #$10
         STA   FLEN+1

TMPLOOP  JSR   RDFILE     ; COPY PART OF VIDEO FILE INTO CACHE
         JSR   WRTEMP     ; LOOP UNTIL FINISHED
         LDA   #$00
         CMP   FTRANS
         BNE   :ENDSUB
         LDA   #$10
         CMP   FTRANS+1
         BEQ   TMPLOOP
:ENDSUB  RTS

DECOMP   LDA   (RDLO),Y   ; BEGIN PROCESSING LZ77 COMPRESSED FRAME
         BMI   :NOTFLAG   ; FLAGS ARE IN RANGE 0-127
         BEQ   :ENDSUB
         TAX              ; STORE LENGTH TO COPY IN X
         INC   RDLO
         BNE   :NOROLL
         INC   RDHI
:NOROLL  LDA   WRTHI
         STA   RDCMPHI
         SEC              ; SUB FROM CURR WRITING POS TO GET TEMP READ LOC
         LDA   WRTLO
         SBC   (RDLO),Y
         STA   RDCMPLO
         BCS   :LOOP
         DEC   RDCMPHI
:LOOP    LDA   (RDCMPLO),Y
         STA   (WRTLO),Y
         INC   RDCMPLO
         BNE   :NORO1
         INC   RDCMPHI
:NORO1   INC   WRTLO
         BNE   :NORO2
         INC   WRTHI
:NORO2   DEX
         BNE   :LOOP
         INC   RDLO
         BNE   :NORO3
         INC   RDHI
:NORO3   JMP   DECOMP
:NOTFLAG STA   (WRTLO),Y
         INC   RDLO
         BNE   :NORO4
         INC   RDHI
:NORO4   INC   WRTLO
         BNE   :NORO5
         INC   WRTHI
:NORO5   JMP   DECOMP
:ENDSUB  RTS

MONMOV   LDA   #$00       ; COPY HIRES2 TO HIRES1 USING MONITOR
         STA   $3C        ; SOURCE START LO
         LDA   #$40
         STA   $3D        ; SOURCE START HI
         LDA   #$FF
         STA   $3E        ; SOURCE END LO
         LDA   #$5F
         STA   $3F        ; SOURCE END HI
         LDA   #$00       ; DEST LO
         STA   $42
         LDA   #$20       ; DEST HI
         STA   $43

         JSR   $FE2C

         RTS

LDLNS    LDA   #$00       ; LOAD LIST OF UPDATE LENGTHS
         STA   FLEN
         LDA   #$01
         STA   FLEN+1
         LDA   #<LN
         STA   FLOC
         LDA   #>LN
         STA   FLOC+1
         JSR   RDFILE
         RTS

CLRHR1   JSR   WRTHR1
:LOOP    TYA
         STA   (WRTLO),Y
         INC   WRTLO
         BNE   :NOROLL
         INC   WRTHI
:NOROLL  LDA   WRTHI
         SEC
         SBC   #$40
         BNE   :LOOP
         RTS
                          ;
                          ;
                          ; MID-LEVEL SUBROUTINES
                          ;
                          ;
PROCDAT  LDX   CMPTYPE
         DEX
         BNE   :LOOP      ; TO BIG A JUMP FOR A BRANCH
         JMP   DECOMP
:LOOP    LDA   (RDLO),Y   ; PROCESS DIFFS, GAPS IN AN 'UPDATE' SECTION
         BMI   :NOGAP     ; IF SIGN (BIT 7) IS SET, THIS ISN'T A GAP
         BEQ   :ENDSUB    ; A ZERO INDICATES END OF UPDATE
         CLC              ; INCREMENT WRITE LOCATION WITH GAP
         ADC   WRTLO
         STA   WRTLO
         BCC   :NOCAR
         INC   WRTHI
:NOCAR   INC   RDLO
         BNE   :NORO1
         INC   RDHI
:NORO1   JMP   :LOOP
:NOGAP   STA   (WRTLO),Y  ; WRITE UPDATED BYTE
         INC   WRTLO
         BNE   :NORO2
         INC   WRTHI
:NORO2   INC   RDLO
         BNE   :NORO3
         INC   RDHI
:NORO3   JMP   :LOOP
:ENDSUB  RTS

                          ;
                          ;
                          ; LOW-LEVEL SUBROUTINES
                          ;
                          ;

RDDAT    LDA   #>DATA     ; BEGIN READING 'DATA' MEMORY
         STA   RDHI
         LDA   #<DATA
         STA   RDLO
         RTS

WRTHR1   LDA   #$20       ; BEGIN WRITING HIRES1
         STA   WRTHI
         LDA   #$00
         STA   WRTLO
         RTS

WRTHR2   LDA   #$40       ; BEGIN WRITING HIRES2
         STA   WRTHI
         LDA   #$00
         STA   WRTLO
         RTS

NXTLN    LDA   (LNLO),Y   ; STORE UPDATE LENGTH IN RDPARST, RESET IF LAST FRAME
         LDY   #1
         CLC
         ADC   (LNLO),Y
         BNE   :NOTEND
         LDA   #<LN       ; INIT READ BYTES FOR UPDATE LENGTH
         STA   LNLO
         LDA   #>LN
         STA   LNHI
         JSR   RSTTEMP
:NOTEND  LDY   #0
         LDA   (LNLO),Y
         STA   TLEN
         INC   LNLO
         BNE   :NOROLL
         INC   LNHI
:NOROLL  LDA   (LNLO),Y
         STA   TLEN+1
         BMI   :LZ        ; IF HIGH BIT NOT SET, THIS IS A FRAMEDIFF
         LDA   #0         ; ELSE, IT'S LZ77 ENCODED
         STA   CMPTYPE
         JMP   :ENDSUB
:LZ      LDA   #1
         STA   CMPTYPE
         LDA   TLEN+1
         AND   #%01111111
         STA   TLEN+1
:ENDSUB  INC   LNLO       ; SET UP NEXT READ
         BNE   :NORO1
         INC   LNHI
:NORO1   RTS

CRETEMP  JSR   MLI
         DFB   CREATE
         DW    CREPARST
         BNE   :ERROR     ; FIXING A BAD BRANCH?
         JMP   :ENDSUB
:ERROR   JMP   ERROR
:ENDSUB  RTS

OPNFILE  JSR   MLI        ; OPEN VIDEO FILE
         DFB   OPEN
         DW    OPNPARSF
         BNE   ERROR
         LDA   OPNPARSF+5  ; STORE REF NUM
         STA   RDPARSF+1
         STA   POSPARSF+1
         STA   CLSPARSF+1
         RTS

OPNTEMP  JSR   MLI        ; OPEN TEMP FILE
         DFB   OPEN
         DW    OPNPARST
         BNE   ERROR
         LDA   OPNPARST+5  ; STORE REF NUM
         STA   RDPARST+1
         STA   WRPARST+1
         STA   POSPARST+1
         STA   CLSPARST+1
         RTS

RDFILE   JSR   MLI        ; READ VIDEO FILE
         DFB   READ       ; (SET DKRDLN, DKSTORE FIRST)
         DW    RDPARSF
         BNE   ERROR
         RTS

RDTEMP   JSR   MLI        ; READ TEMP FILE
         DFB   READ       ; (SET DKRDLN, DKSTORE FIRST)
         DW    RDPARST
         BNE   ERROR
         RTS

WRTEMP   JSR   MLI
         DFB   WRITE
         DW    WRPARST
         BNE   ERROR
         RTS

RSTFILE  JSR   MLI        ; RESET VID FILE MARK TO BEGINNING
         DFB   SETPOS
         DW    POSPARSF
         BNE   ERROR
         RTS

RSTTEMP  JSR   MLI        ; RESET TEMP FILE MARK TO BEGINNING
         DFB   SETPOS
         DW    POSPARST
         BNE   ERROR
         RTS

CLSFILE  JSR   MLI        ; CLOSE VIDEO FILE
         DFB   CLOSE
         DW    CLSPARSF
         RTS

CLSTEMP  JSR   MLI        ; CLOSE TEMP FILE
         DFB   CLOSE
         DW    CLSPARST
         RTS

DESTEMP  JSR   MLI
         DFB   DESTROY
         DW    DESPARST
         BNE   ERROR
         RTS

GETPRE   JSR   MLI
         DFB   GETPFIX
         DW    PFIXPARS
         BNE   ERROR
         RTS

SETPRE   JSR   MLI
         DFB   SETPFIX
         DW    PFIXPARS
         BNE   ERROR
         RTS

ERROR    JSR   PRNTA
         JSR   CROUT
         JMP   $FA62
                          ;
                          ;
                          ; PARAMETER LISTS FOR FILE OPS
                          ;
                          ;

CREPARST DFB   7          ; NUMBER OF PARAMETERS FOR 'CREATE'
         DW    TEMPNAME   ; POINT TO NAME OF FILE
         DFB   $C3        ; ACCESS (D RN W R, ENABLED)
         DFB   $06        ; FILE TYPE ($06 = BINARY)
         DW    $00000     ; AUX TYPE (NOT NEEDED)
         DFB   $01        ; THIS IS A FILE, NOT A DIRECTORY ($0D)
         DW    $0000      ; UNUSED DATE STUFF
         DW    $0000


OPNPARSF DFB   3          ; NUMER OF PARAMETERS FOR 'OPEN'
         DW    FILENAME   ; POINTER TO NAME OF FILE
         DW    $0C00      ; I/O BUFFER LOCATION
         DS    1          ; REFERENCE NUMBER FOR FILE

OPNPARST DFB   3          ; NUMER OF PARAMETERS FOR 'OPEN'
         DW    TEMPNAME   ; POINTER TO NAME OF FILE
         DW    $8000      ; I/O BUFFER LOCATION
         DS    1          ; REFERENCE NUMBER FOR FILE


RDPARSF  DFB   4          ; NUMBER OF PARAMETERS FOR 'READ'
         DS    1          ; REF NUM
FLOC     DS    2          ; LOCATION TO LOAD WITH DISK DATA
FLEN     DS    2          ; HOW MUCH TO READ
FTRANS   DS    2          ; WHERE NUM BYTES TRANFERRED IS STORED

RDPARST  DFB   4          ; NUMBER OF PARAMETERS FOR 'READ'
         DS    1          ; REF NUM
TLOC     DS    2          ; LOCATION TO LOAD WITH DISK DATA
TLEN     DS    2          ; HOW MUCH TO READ
         DS    2          ; WHERE NUM BYTES TRANFERRED IS STORED

WRPARST  DFB   4          ; NUMBER OF PARAMETERS FOR 'WRITE'
         DS    1          ; REF NUM
         DW    $6000      ; POINTS TO BEGINNING OF DATA TO BE TRANSFERRED
         DW    $1000      ; TRANSFER REQUEST, IN BYTES
         DS    2          ; BYTES TRANSFERRED

POSPARSF DFB   2          ; NUMBER OF PARAMETERS FOR 'SET MARK'
         DS    1          ; REF NUM
         DFB   0          ; VALUE FOR MARK (ALWAYS BEGINNING OF FILE)
         DFB   0
         DFB   0          ; (COULD MAYBE USE 'DS 3')

POSPARST DFB   2          ; NUMBER OF PARAMETERS FOR 'SET MARK'
         DS    1          ; REF NUM
         DFB   0          ; VALUE FOR MARK (ALWAYS BEGINNING OF FILE)
         DFB   0
         DFB   0          ; (COULD MAYBE USE 'DS 3')

CLSPARSF DFB   1          ; NUMBER OF PARAMETERS FOR 'CLOSE'
         DS    1          ; REF NUM

CLSPARST DFB   1          ; NUMBER OF PARAMETERS FOR 'CLOSE'
         DS    1          ; REF NUM

DESPARST DFB   1
         DW    TEMPNAME

PFIXPARS DFB   1
         DW    PFIXNAME

PFIXNAME STR   "/ANIMTEST"
TEMPNAME STR   "/RAM/TEMP"

PROMPT   STR   "FILENAME:"

STATE    DS    1
CMPTYPE  DS    1          ; 0 FOR FRAMEDIFF, 1 FOR KEYFRAME

FILENAME DS    50
