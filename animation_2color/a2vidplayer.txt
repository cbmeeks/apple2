                          ;
                          ;
                          ; VARIOUS EQUATES RELATING
                          ; TO STORAGE AND RETRIEVAL
                          ;
                          ;

HIRES1   EQU   $2000      ; HIRES PAGES 1 AND 2
HIRES2   EQU   $4000

KEYS     EQU   $7000

DATA     EQU   $1000      ; LOCATION TO HOLD COMPRESSED DATA

RDLO     EQU   $06        ; LOCATION IN MEMORY WE
RDHI     EQU   $07        ; ARE READING FROM

WRTLO    EQU   $08        ; PAGE LOCATION WE ARE
WRTHI    EQU   $09        ; WRITING TO

LNLO     EQU   $EC        ; FOR READING UPDATE LENGTHS
LNHI     EQU   $ED

RDCMPLO  EQU   $EE        ; EXTRA READ 'HEADS' FOR LZ77 DECOMP
RDCMPHI  EQU   $EF

TMP      EQU   $EB        ; NOTE: ZP ADDRESS $EB IS FREE

RDKEYLO  EQU   $FA
RDKEYHI  EQU   $FB

                          ;
                          ;
                          ; EQUATES RELATING TO
                          ; SYSTEM CALLS
                          ;
                          ;

MLI      EQU   $BF00      ; PRODOS CALL
CREATE   EQU   $C0        ; MLI CREATE FILE
OPEN     EQU   $C8        ; MLI OPEN FILE
READ     EQU   $CA        ; MLI READ FILE
WRITE    EQU   $CB        ; MLI WRITE FILE
SETPOS   EQU   $CE        ; MLI SET POSITION IN FILE
CLOSE    EQU   $CC        ; MLI CLOSE FILE
DESTROY  EQU   $C1        ; MLI DELETE FILE
SETPFIX  EQU   $C6        ; MLI GET SYSTEM PREFIX
GETPFIX  EQU   $C7        ; MLI SET SYSTEM PREFIX

PRNTA    EQU   $FDDA      ; PRINT ACCUMULATOR
CROUT    EQU   $FD8E      ; OUTPUT CARRIAGE RETURN
COUT     EQU   $FDF0
CLRHOME  EQU   $FC58

                          ;
                          ;
                          ; MAIN PROGRAM START
                          ;
                          ;

         ORG   $2000      ; RUNS AS PRODOS SYSTEM APPLICATION
                          ; GOTTA COPY EVERYTHING DOWN TO $800
         LDY   #0

         LDA   #<PRGSTART
         STA   RDLO
         LDA   #>PRGSTART
         STA   RDHI

         LDA   #$00
         STA   WRTLO
         LDA   #$08
         STA   WRTHI

COPY     LDA   (RDLO),Y
         STA   (WRTLO),Y

         INC   RDLO
         BNE   :NR
         INC   RDHI
:NR      INC   WRTLO
         BNE   :NR1
         INC   WRTHI
:NR1     LDA   RDHI

         CMP   #$30
         BNE   COPY

         JMP   $800

PRGSTART EQU   *

                          ;
                          ;
                          ; 'TRADITIONAL' START OF PROGRAM
                          ;
                          ;

         ORG   $800       ; VIDEO DECODER PROGRAM START

         JSR   SETPRE     ; SET PREFIX, ASK FOR VID FILE, OPEN

INIT     JSR   CLRHOME

         JSR   LSTDIR

         JSR   ASKFILE


         JSR   OPNFILE

         LDY   #0

         LDA   #1
         STA   STATE      ; SET STATE = 1

         JSR   LDLNS      ; LOAD LIST OF FRAME LENGTHS INTO MEMORY
         JSR   LDKEYS     ; LOAD KEYFRAMES INTO MAIN BANK

         LDA   #<LN       ; INIT READ BYTES FOR UPDATE LENGTH
         STA   LNLO
         LDA   #>LN
         STA   LNHI

         LDA   #<KEYS     ; INIT READ BYTES FOR KEYFRAMES
         STA   RDKEYLO
         LDA   #>KEYS
         STA   RDKEYHI

         JSR   CRETEMP    ; CREATE TEMP VIDEO CACHE FILE
         JSR   OPNTEMP
         JSR   MKTEMP
         JSR   CLSTEMP

         JSR   CLSFILE

         JSR   OPNTEMP    ; OPEN CACHE FILE

         JSR   CLRHR1     ; CLEAR HIRES1

         STA   $C057      ; INIT DISPLAY(?) -- INSPECT FURTHER
         STA   $C050

         STA   $C054

LOOP     JSR   UPDATE     ; MAIN LOOP
         LDA   $C000      ; READ FOR KEYPRESS
         BMI   EXIT
         STA   $C010      ; CLEAR KEYBOARD STROBE
         JMP   LOOP

EXIT     JSR   CLSTEMP
         JSR   DESTEMP
         STA   $C051      ; SWITCH TEXT
         STA   $C054      ; PAGE 1

         STA   $C010      ; CLEAR KEY;

         JMP   INIT

                          ;
                          ;
                          ; HIGH-LEVEL SUBROUTINES
                          ;
                          ;

LSTDIR   LDA   #<DIRNAME  ; OPEN DIRECTORY FILE
         STA   OPNPARSF+1
         LDA   #>DIRNAME
         STA   OPNPARSF+2
         JSR   OPNFILE

         LDA   #$00       ; LOAD IT'S DATA INTO MEMORY
         STA   FLOC
         LDA   #$60
         STA   FLOC+1
         LDA   #$00
         STA   FLEN
         LDA   #$10
         STA   FLEN+1
         JSR   RDFILE
         JSR   CLSFILE

         LDA   #$2B       ; SET INITIAL POSITION IN DATA
         STA   RDLO
         LDA   #$60
         STA   RDHI

         LDX   $6025      ; LOW BYTE OF FILE COUNT

         LDA   #$0D       ; ENTRIES PER BLOCK
         STA   TMP
         DEC   TMP        ; COUNT DIRECTORY ENTRY?

         JSR   CROUT

:OLOOP   LDY   #0

         LDA   RDLO       ; SET UP CMP FURTHER DOWN THE LINE
         STA   :MK1+1
         LDA   RDHI
         STA   :MK1+2

         LDA   (RDLO),Y
         AND   #$F0
         BEQ   :NACTIVE

         LDA   (RDLO),Y   ; LOW PART OF THIS BYTE IS LENGTH
         AND   #$0F       ; FIX IT TO WORK CORRECTLY AS STRING
         STA   (RDLO),Y   ; WITH LENGTH PLACED FIRST

         LDA   #$A0       ; SPACE BEFORE EACH LISTING
         JSR   COUT


:LOOP1   INY              ; PRINT FILE ENTRY
         LDA   (RDLO),Y
         ORA   #%10000000
         JSR   COUT
:MK1     CPY   $F000      ; PLACEHOLDER
         BLT   :LOOP1

         DEX              ; EXIT SUB IF WE'VE HIT THEM ALL
         BEQ   :ENDSUB

         JSR   CROUT

:NACTIVE DEC   TMP        ; SEE IF WE'RE SWITCHING TO NEW BLOCK
         BNE:  :SKIP

         LDA   #$4
         STA   RDLO
         INC   RDHI

         LDA   #$0D
         STA   TMP

         JMP   :OLOOP

:SKIP    LDA   #$27       ; INCREMENT TO LOC OF NEXT FILE ENTRY
         CLC
         ADC   RDLO
         STA   RDLO
         BCC   :NR
         INC   RDHI

:NR      JMP   :OLOOP

:ENDSUB  JSR   CROUT
         JSR   CROUT
         RTS

ASKFILE  LDX   #0         ; ASK WHICH VIDEO FILE TO PLAY
:LOOP1   INX              ; LOOP TO PRINT 'FILENAME:'
         LDA   PROMPT,X
         JSR   COUT       ; DISPLAYS CHAR IN ACC
         CPX   PROMPT
         BLT   :LOOP1
         LDA   #$A0       ; SET ' :' AS PROMPT
         STA   $33
         JSR   $FD6A      ; APPLE II GETLN ROUTINE
         STX   FILENAME
         LDX   #0
:LOOP2   LDA   $200,X
         STA   FILENAME+1,X
         INX
         CPX   FILENAME
         BNE   :LOOP2
         LDA   #<FILENAME
         STA   OPNPARSF+1
         LDA   #>FILENAME
         STA   OPNPARSF+2
         RTS

UPDATE   LDA   STATE      ; HANDLES UPDATING, SWITCHING FRAMES
         BNE   :NOTZERO
         LDA   CMPTYPE
         BEQ   :NORMAL

         JSR   SPDMOV     ; WHAT TO DO IF IT'S LZ77?

         JMP   :SKIP
:NORMAL  JSR   WRTHR1
         JSR   RDDAT
         JSR   PROCDAT
:SKIP    LDA   #1
         STA   STATE
         STA   $C054
         JMP   :ENDSUB
:NOTZERO LDA   #<DATA     ; STATE = 1
         STA   TLOC
         LDA   #>DATA
         STA   TLOC+1
         JSR   NXTLN
         JSR   RDDAT
         JSR   WRTHR2

         LDA   CMPTYPE    ; DON'T READ INTO DIFFS BUFFER IF LZ77
         BNE   :NOREAD

         JSR   RDTEMP
:NOREAD  JSR   PROCDAT
         LDA   #0
         STA   STATE
         STA   $C055
:ENDSUB  RTS

MKTEMP   LDA   #$00       ; LOAD FRAME UPDATES INTO RAMDISK CACHE FILE
         STA   FLOC       ; SET UP BUFFER THROUGH WHICH TO COPY TEMP CACHE
         LDA   #$60
         STA   FLOC+1
         LDA   #$00
         STA   FLEN
         LDA   #$10
         STA   FLEN+1

TMPLOOP  JSR   RDFILE     ; COPY PART OF VIDEO FILE INTO CACHE
         JSR   WRTEMP     ; LOOP UNTIL FINISHED
         LDA   #$00
         CMP   FTRANS
         BNE   :ENDSUB
         LDA   #$10
         CMP   FTRANS+1
         BEQ   TMPLOOP
:ENDSUB  RTS

DECOMP   LDA   (RDKEYLO),Y ; BEGIN PROCESSING LZ77 COMPRESSED FRAME
         BMI   :NOTFLAG   ; FLAGS ARE IN RANGE 0-127
         TAX              ; STORE LENGTH TO COPY IN X

         TYA              ; IF WE'RE OUT OF LITERALS, UPDATE HEADS
         CLC
         ADC   RDKEYLO
         STA   RDKEYLO
         BCC   :N1
         INC   RDKEYHI
:N1      TYA
         CLC
         ADC   WRTLO
         STA   WRTLO
         BCC   :N2
         INC   WRTHI
:N2      LDY   #0

         DEX              ; CHECK FOR FLAG THAT INDICATES RUN OF ZEROES
         BNE   :NOTZERS
         INC   RDKEYLO
         BNE   :NR
         INC   RDKEYHI
:NR      LDA   (RDKEYLO),Y
         TAX
         LDA   #$80

:ZLOOP   STA   (WRTLO),Y
         INY
         DEX
         BNE   :ZLOOP

         TYA
         CLC
         ADC   WRTLO
         STA   WRTLO
         BCC   :NR2
         INC   WRTHI
:NR2     INC   RDKEYLO
         BNE   :NR3
         INC   RDKEYHI
:NR3     LDY   #0
         JMP   DECOMP

:NOTZERS INX
         BEQ   :ENDSUB

         INC   RDKEYLO
         BNE   :NOROLL
         INC   RDKEYHI
:NOROLL  LDA   WRTHI
         STA   RDCMPHI
         SEC              ; SUB FROM CURR WRITING POS TO GET TEMP READ LOC
         LDA   WRTLO
         SBC   (RDKEYLO),Y
         STA   RDCMPLO
         BCS   :LOOP
         DEC   RDCMPHI

:LOOP    LDA   (RDCMPLO),Y
         STA   (WRTLO),Y
         INY
         DEX
         BNE   :LOOP

         TYA
         CLC
         ADC   WRTLO
         STA   WRTLO
         BCC   :NC
         INC   WRTHI
:NC      INC   RDKEYLO
         BNE   :NR4
         INC   RDKEYHI
:NR4     LDY   #0
         JMP   DECOMP

:NOTFLAG STA   (WRTLO),Y
         INY
         BNE   DECOMP
         INC   RDKEYHI
         INC   WRTHI
         JMP   DECOMP
:ENDSUB  INC   RDKEYLO
         BNE   :SK
         INC   RDKEYHI
:SK      RTS

LDKEYS   LDA   #$02       ; LOAD KEYFRAMES INTO $7000
         STA   FLEN       ; FIRST 2 BYTES ARE THE LENGTH TO LOAD
         LDA   #$00
         STA   FLEN+1
         LDA   #$00
         STA   FLOC
         LDA   #$70
         STA   FLOC+1
         JSR   RDFILE

         LDA   $7000
         STA   FLEN
         LDA   $7001
         STA   FLEN+1
         JSR   RDFILE
         RTS

LDLNS    LDA   #$02       ; LOAD LIST OF UPDATE LENGTHS
         STA   FLEN       ; FIRST 2 BYTES HOLDS NUMBER OF FRAMES
         LDA   #$00       ; (+1 FOR END OF MOVIE SYMBOL)
         STA   FLEN+1
         LDA   #$00
         STA   FLOC
         LDA   #$60
         STA   FLOC+1
         JSR   RDFILE

         CLC              ; MULTIPLY BY TWO
         ROL   $6000
         ROL   $6001

         LDA   $6000
         STA   FLEN
         LDA   $6001
         STA   FLEN+1
         LDA   #<LN
         STA   FLOC
         LDA   #>LN
         STA   FLOC+1
         JSR   RDFILE
         RTS

CLRHR1   JSR   WRTHR1
:LOOP    TYA
         STA   (WRTLO),Y
         INC   WRTLO
         BNE   :NOROLL
         INC   WRTHI
:NOROLL  LDA   WRTHI
         SEC
         SBC   #$40
         BNE   :LOOP
         RTS
                          ;
                          ;
                          ; MID-LEVEL SUBROUTINES
                          ;
                          ;
PROCDAT  LDX   CMPTYPE
         DEX
         BNE   :LOOP      ; TO BIG A JUMP FOR A BRANCH
         JMP   DECOMP
:LOOP    LDA   (RDLO),Y   ; PROCESS DIFFS, GAPS IN AN 'UPDATE' SECTION
         BMI   :NOGAP     ; IF SIGN (BIT 7) IS SET, THIS ISN'T A GAP
         BEQ   :ENDSUB    ; A ZERO INDICATES END OF UPDATE
         CLC              ; INCREMENT WRITE LOCATION WITH GAP
         ADC   WRTLO
         STA   WRTLO
         BCC   :NOCAR
         INC   WRTHI
:NOCAR   INC   RDLO       ; INC READ HEAD, CHECK TO SKIP UP TO $6000
         BNE   :NORO1
         INC   RDHI
         LDA   RDHI
         CMP   #$20
         BNE   :NORO1
         LDA   #$60
         STA   RDHI
:NORO1   JMP   :LOOP
:NOGAP   STA   (WRTLO),Y  ; WRITE UPDATED BYTE
         INC   WRTLO
         BNE   :NORO2
         INC   WRTHI
:NORO2   INC   RDLO       ; INC READ HEAD AND CHECK AGAIN
         BNE   :NORO3
         INC   RDHI
         LDA   RDHI
         CMP   #$20
         BNE   :NORO3
         LDA   #$60
         STA   RDHI

:NORO3   JMP   :LOOP
:ENDSUB  RTS

                          ;
                          ;
                          ; LOW-LEVEL SUBROUTINES
                          ;
                          ;

RDDAT    LDA   #>DATA     ; BEGIN READING 'DATA' MEMORY
         STA   RDHI
         LDA   #<DATA
         STA   RDLO
         RTS

WRTHR1   LDA   #$20       ; BEGIN WRITING HIRES1
         STA   WRTHI
         LDA   #$00
         STA   WRTLO
         RTS

WRTHR2   LDA   #$40       ; BEGIN WRITING HIRES2
         STA   WRTHI
         LDA   #$00
         STA   WRTLO
         RTS

NXTLN    LDA   (LNLO),Y   ; STORE UPDATE LENGTH IN RDPARST, RESET IF LAST FRAME
         LDY   #1
         CLC
         ADC   (LNLO),Y
         BNE   :NOTEND
         BCS   :NOTEND
         LDA   #<LN       ; INIT READ BYTES FOR UPDATE LENGTH
         STA   LNLO
         LDA   #>LN
         STA   LNHI
         LDA   #<KEYS     ; INIT READ BYTES FOR KEYFRAMES
         STA   RDKEYLO
         LDA   #>KEYS
         STA   RDKEYHI
         JSR   RSTTEMP
:NOTEND  LDY   #0
         LDA   (LNLO),Y
         STA   TLEN
         INC   LNLO
         BNE   :NOROLL
         INC   LNHI
:NOROLL  LDA   (LNLO),Y
         STA   TLEN+1
         BMI   :LZ        ; IF HIGH BIT NOT SET, THIS IS A FRAMEDIFF
         LDA   #0         ; ELSE, IT'S LZ77 ENCODED
         STA   CMPTYPE
         JMP   :ENDSUB
:LZ      LDA   #1
         STA   CMPTYPE
         LDA   TLEN+1
         AND   #%01111111
         STA   TLEN+1
:ENDSUB  INC   LNLO       ; SET UP NEXT READ
         BNE   :NORO1
         INC   LNHI
:NORO1   RTS

CRETEMP  JSR   MLI
         DFB   CREATE
         DW    CREPARST
         BNE   :ERROR     ; FIXING A BAD BRANCH?
         JMP   :ENDSUB
:ERROR   JMP   ERROR
:ENDSUB  RTS

OPNFILE  JSR   MLI        ; OPEN VIDEO FILE
         DFB   OPEN
         DW    OPNPARSF
         BEQ   :FINE
         JMP   ERROR
:FINE    LDA   OPNPARSF+5  ; STORE REF NUM
         STA   RDPARSF+1
         STA   POSPARSF+1
         STA   CLSPARSF+1
         RTS

OPNTEMP  JSR   MLI        ; OPEN TEMP FILE
         DFB   OPEN
         DW    OPNPARST
         BEQ   :FINE
         JMP   ERROR
:FINE    LDA   OPNPARST+5  ; STORE REF NUM
         STA   RDPARST+1
         STA   WRPARST+1
         STA   POSPARST+1
         STA   CLSPARST+1
         RTS

RDFILE   JSR   MLI        ; READ VIDEO FILE
         DFB   READ       ; (SET DKRDLN, DKSTORE FIRST)
         DW    RDPARSF
         BNE   ERROR
         RTS

RDTEMP   LDA   TLEN+1      ; DETERMINE HOW MUCH SHOULD GO ABOVE PAGE 2
         SEC              ; SUBTRACTING $1000
         SBC   #$10
         BMI   :SKIP      ; IF LESS THAN 4KB, LOAD AS IS
         PHA              ; SAVE HIGH REMAINDER
         LDA   TLEN
         PHA              ; SAVE LOW REMAINDER
         LDA   #$00       ; SAVE FIRST 4K
         STA   TLEN
         LDA   #$10
         STA   TLEN+1
         JSR   :SKIP
         LDA   #$00       ; SAVE WHATEVER'S LEFT UP PAST PAGE 2
         STA   TLOC
         LDA   #$60
         STA   TLOC+1
         PLA
         STA   TLEN
         PLA
         STA   TLEN+1

:SKIP    JSR   MLI        ; READ TEMP FILE
         DFB   READ       ; (SET DKRDLN, DKSTORE FIRST)
         DW    RDPARST
         BNE   ERROR
         RTS

WRTEMP   JSR   MLI
         DFB   WRITE
         DW    WRPARST
         BNE   ERROR
         RTS

RSTFILE  JSR   MLI        ; RESET VID FILE MARK TO BEGINNING
         DFB   SETPOS
         DW    POSPARSF
         BNE   ERROR
         RTS

RSTTEMP  JSR   MLI        ; RESET TEMP FILE MARK TO BEGINNING
         DFB   SETPOS
         DW    POSPARST
         BNE   ERROR
         RTS

CLSFILE  JSR   MLI        ; CLOSE VIDEO FILE
         DFB   CLOSE
         DW    CLSPARSF
         RTS

CLSTEMP  JSR   MLI        ; CLOSE TEMP FILE
         DFB   CLOSE
         DW    CLSPARST
         RTS

DESTEMP  JSR   MLI
         DFB   DESTROY
         DW    DESPARST
         BNE   ERROR
         RTS

GETPRE   JSR   MLI
         DFB   GETPFIX
         DW    PFIXPARS
         BNE   ERROR
         RTS

SETPRE   JSR   MLI
         DFB   SETPFIX
         DW    PFIXPARS
         BNE   ERROR
         RTS

ERROR    JSR   PRNTA
         JSR   CROUT
         JMP   $FA62
                          ;
                          ;
                          ; PARAMETER LISTS FOR FILE OPS
                          ;
                          ;

CREPARST DFB   7          ; NUMBER OF PARAMETERS FOR 'CREATE'
         DW    TEMPNAME   ; POINT TO NAME OF FILE
         DFB   $C3        ; ACCESS (D RN W R, ENABLED)
         DFB   $06        ; FILE TYPE ($06 = BINARY)
         DW    $00000     ; AUX TYPE (NOT NEEDED)
         DFB   $01        ; THIS IS A FILE, NOT A DIRECTORY ($0D)
         DW    $0000      ; UNUSED DATE STUFF
         DW    $0000


OPNPARSF DFB   3          ; NUMER OF PARAMETERS FOR 'OPEN'
         DW    FILENAME   ; POINTER TO NAME OF FILE
         DW    $B600      ; I/O BUFFER LOCATION
         DS    1          ; REFERENCE NUMBER FOR FILE

OPNPARST DFB   3          ; NUMER OF PARAMETERS FOR 'OPEN'
         DW    TEMPNAME   ; POINTER TO NAME OF FILE
         DW    $BA00      ; I/O BUFFER LOCATION
         DS    1          ; REFERENCE NUMBER FOR FILE


RDPARSF  DFB   4          ; NUMBER OF PARAMETERS FOR 'READ'
         DS    1          ; REF NUM
FLOC     DS    2          ; LOCATION TO LOAD WITH DISK DATA
FLEN     DS    2          ; HOW MUCH TO READ
FTRANS   DS    2          ; WHERE NUM BYTES TRANFERRED IS STORED

RDPARST  DFB   4          ; NUMBER OF PARAMETERS FOR 'READ'
         DS    1          ; REF NUM
TLOC     DS    2          ; LOCATION TO LOAD WITH DISK DATA
TLEN     DS    2          ; HOW MUCH TO READ
         DS    2          ; WHERE NUM BYTES TRANFERRED IS STORED

WRPARST  DFB   4          ; NUMBER OF PARAMETERS FOR 'WRITE'
         DS    1          ; REF NUM
         DW    $6000      ; POINTS TO BEGINNING OF DATA TO BE TRANSFERRED
         DW    $1000      ; TRANSFER REQUEST, IN BYTES
         DS    2          ; BYTES TRANSFERRED

POSPARSF DFB   2          ; NUMBER OF PARAMETERS FOR 'SET MARK'
         DS    1          ; REF NUM
         DFB   0          ; VALUE FOR MARK (ALWAYS BEGINNING OF FILE)
         DFB   0
         DFB   0          ; (COULD MAYBE USE 'DS 3')

POSPARST DFB   2          ; NUMBER OF PARAMETERS FOR 'SET MARK'
         DS    1          ; REF NUM
         DFB   0          ; VALUE FOR MARK (ALWAYS BEGINNING OF FILE)
         DFB   0
         DFB   0          ; (COULD MAYBE USE 'DS 3')

CLSPARSF DFB   1          ; NUMBER OF PARAMETERS FOR 'CLOSE'
         DS    1          ; REF NUM

CLSPARST DFB   1          ; NUMBER OF PARAMETERS FOR 'CLOSE'
         DS    1          ; REF NUM

DESPARST DFB   1
         DW    TEMPNAME

PFIXPARS DFB   1
         DW    PFIXNAME

PFIXNAME STR   "/ANIMTEST"
DIRNAME  STR   "/ANIMTEST"
TEMPNAME STR   "/RAM/TEMP"

PROMPT   STR   "FILENAME:"

STATE    DS    1
CMPTYPE  DS    1          ; 0 FOR FRAMEDIFF, 1 FOR KEYFRAME

FILENAME DS    15

LN       DS    512        ; WHERE FRAME LENGTHS ARE STORED
                          ; WARNING: THIS WOULD CLOBBER SPEEDCODE
                          ; ON BIG FILES

                          ;
                          ;
                          ; SPEEDCODE TYPE STUFF
                          ;
                          ;

SPDMOV   LDY   #0

:LOOP    LDA   $4000,Y
         STA   $2000,Y

         LDA   $4100,Y
         STA   $2100,Y

         LDA   $4200,Y
         STA   $2200,Y

         LDA   $4300,Y
         STA   $2300,Y

         LDA   $4400,Y
         STA   $2400,Y

         LDA   $4500,Y
         STA   $2500,Y

         LDA   $4600,Y
         STA   $2600,Y

         LDA   $4700,Y
         STA   $2700,Y

         LDA   $4800,Y
         STA   $2800,Y

         LDA   $4900,Y
         STA   $2900,Y

         LDA   $4A00,Y
         STA   $2A00,Y

         LDA   $4B00,Y
         STA   $2B00,Y

         LDA   $4C00,Y
         STA   $2C00,Y

         LDA   $4D00,Y
         STA   $2D00,Y

         LDA   $4E00,Y
         STA   $2E00,Y

         LDA   $4F00,Y
         STA   $2F00,Y

         LDA   $5000,Y
         STA   $3000,Y

         LDA   $5100,Y
         STA   $3100,Y

         LDA   $5200,Y
         STA   $3200,Y

         LDA   $5300,Y
         STA   $3300,Y

         LDA   $5400,Y
         STA   $3400,Y

         LDA   $5500,Y
         STA   $3500,Y

         LDA   $5600,Y
         STA   $3600,Y

         LDA   $5700,Y
         STA   $3700,Y

         LDA   $5800,Y
         STA   $3800,Y

         LDA   $5900,Y
         STA   $3900,Y

         LDA   $5A00,Y
         STA   $3A00,Y

         LDA   $5B00,Y
         STA   $3B00,Y

         LDA   $5C00,Y
         STA   $3C00,Y

         LDA   $5D00,Y
         STA   $3D00,Y

         LDA   $5E00,Y
         STA   $3E00,Y

         LDA   $5F00,Y
         STA   $3F00,Y

         INY
         BNE   :NOTDONE
         RTS
:NOTDONE JMP   :LOOP
